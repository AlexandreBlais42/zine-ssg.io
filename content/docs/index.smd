---
.title = "Documentation",
.date = @date("2020-07-06T00:00:00"),
.author = "Sample Author",
.layout = "documentation.shtml",
.draft = false,
.custom = {
  "toc": false,
}
--- 

># [Warning]($block.attrs('warning'))
>Zine is alpha software.  
>Using Zine today means participating in its development.

## In this section

- Zine Basics
  - [Site Structure](./site)
  - [CLI usage](./cli)
  - [Editor Support](./editors)
- Authoring
  - [Scripty Basics](./scripty)
  - [SuperMD](./supermd) ([reference](./supermd/scripty))
  - [SuperHTML](./superhtml) ([Reference](./superhtml/scripty))
- [Assets](./assets)
- [Multilingual Websites](./i18n) *(i18n)*
- Deploying
    - [GitHub Pages](./deploying/github-pages)
    - [Cloudflare Pages](./deploying/cloudflare-pages)
- [Using Zine from `build.zig`](./zig)
- [Frequently Encountered Use Cases](./frequent)


  
Later in the page you'll see some examples of both languages.

## The Content Directory
## CLI
#### `$ zig build`
Builds your website and places it in `zig-out`. Pass `-p some/path/` to change the output directory.

Use `zig build --help` for more information about flags supported by `zig build`.

#### `$ zig build serve`
Builds your website and starts the development server. Making changes to any of your input directories (ie content, layouts, static) will automatically trigger a rebuild and a page reload.

Zine will default to using port `1990`, pass **`-Dport=8080`** to set the listening port to 8080, or any value you'd like.

## First Steps

Here's a basic example where we create the homepage of our sample website. 

**`shell`**
```
touch content/index.smd
touch layouts/home.shtml
```

**`content/index.smd`** 
```ziggy
---
.title = "Home",
.date = @date("2020-07-06T00:00:00"),
.author = "Sample Author",
.layout = "home.shtml",
.draft = false,
--- 
Hello World!
```

**`layouts/home.shtml`**
```superhtml
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title :text="$site.title"></title>
  </head>
  <body>
    <h1 :text="$page.title"></h1>
    <div :html="$page.content()"></div>
  </body>
</html>
```


**`zig-out/index.shtml (output)`** 
```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Sample Site</title>
  </head>
  <body>
    <h1>Home</h1>
    <div><p>Hello World!</p></div>
  </body>
</html>
```

In this example we just saw:
- `index.smd` defines that its layout is `home.shtml`
- `home.shtml` defines some HTML and uses 
   [special attributes]($link.page('docs/superhtml').ref('attributes')) 
   to pull in the contents of `index.smd` 
- the final output is going to be the homepage of our website 

If you run the dev server now (`zig build serve`), you should see the output page at `https://localhost:1990/`.

### Adding more pages

Let's imagine now that we want to add a blog section to our website with a first post in it.

**`shell`**
```bash
mkdir content/blog
touch content/blog/first-post.smd
touch layouts/post.shtml
```

**`content/blog/first-post.smd`**
```ziggy
---
.title = "First Post!",
.date = @date("2020-07-06T00:00:00"),
.author = "Sample Author",
.layout = "post.shtml",
.draft = false,
--- 
This is my first post!
```

**`layouts/post.shtml`**
```superhtml
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title :text="$site.title"></title>
  </head>
  <body>
    <h1>Blog</h1>
    <h2 :text="$page.title"></h2>
    <h3>by <span :text="$page.author"></span></h3>
    <h4>
      Posted on: 
      <span 
        :text="$page.date.format('January 02, 2006')"
      ></span>
    </h4>
    <div :html="$page.content()"></div>
  </body>
</html>
```

At this point you should be able to navigate to
`http://localhost:1990/blog/first-post/` and see the result.

Note how we needed a new layout (`post.shtml`) since the blog post is not
going to have the same structure as the homepage.

While the structure is indeed different, both `post.shtml` and `home.shtml`
share a lot of common boilerplate that can be collected into a single template by leveraging SuperHTML template extension features.

**You now know enough about Zine to read the remaining documentation pages.**

## Next Steps

Start with [Scripty Basics]($link.page('docs/scripty')) to learn how expression syntax works, then circle back to [the top of this page](#) to read the other documentation pages.

See the [Community page](/community/) to join our community.
